provider "aws" {
  region = "${var.region}"
}

terraform {
  required_version = ">= 1.0.0" # introduction of Local Values configuration language feature
}

######################################
# Create ECS Cluster
######################################

module "ecs_cluster" {
  #source               = "../"
  create_service_role  = var.create_service_role
  region               = var.region
  cluster_name         = var.cluster_name
  launch_template_id   = aws_launch_template.ecs_launch_template.id
  launch_configuration = null
  asg_max_size         = 5
  vpc_subnet_ids       = [module.ecs_vpc.PrivateSubnet1AID, module.ecs_vpc.PrivateSubnet2AID, module.ecs_vpc.PrivateSubnet3AID]
}

/*==========================
      AWS ECS Service
===========================*/

resource "aws_ecs_service" "ecs_service" {
  name                              = "Service-${var.name}"
  cluster                           = var.ecs_cluster_id
  task_definition                   = var.arn_task_definition
  desired_count                     = var.desired_tasks
  health_check_grace_period_seconds = 10
  launch_type                       = "FARGATE"

  network_configuration {
    security_groups = [var.arn_security_group]
    subnets         = [var.subnets_id[0], var.subnets_id[1]]
  }

  load_balancer {
    target_group_arn = var.arn_target_group
    container_name   = var.container_name
    container_port   = var.container_port
  }

  deployment_controller {
    type = "CODE_DEPLOY"
  }

#  lifecycle {
#    // to avoid changes generated by autoscaling or new CodeDeploy changes
#    ignore_changes = [desired_count, task_definition, load_balancer]
#  }

}


/*====================================
      AWS ECS Task definition
=====================================*/

resource "aws_ecs_task_definition" "ecs_task_definition" {
  family                   = "task-definition-${var.name}"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = var.cpu
  memory                   = var.memory
  execution_role_arn       = var.execution_role_arn
  task_role_arn            = var.task_role_arn

  container_definitions = <<DEFINITION
    [
      {
        "logConfiguration": {
            "logDriver": "awslogs",
            "secretOptions": null,
            "options": {
              "awslogs-group": "/ecs/task-definition-${var.name}",
              "awslogs-region": "${var.region}",
              "awslogs-stream-prefix": "ecs"
            }
          },
        "cpu": 0,
        "image": "${var.docker_repo}",
        "name": "${var.container_name}",
        "networkMode": "awsvpc",
        "portMappings": [
          {
            "containerPort": ${var.container_port},
            "hostPort": ${var.container_port}
          }
        ]
        }
    ]
    DEFINITION
}